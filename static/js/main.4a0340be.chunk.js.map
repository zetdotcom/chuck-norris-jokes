{"version":3,"sources":["images/chuck.jpg","components/Header/Header.js","components/Button/Button.js","components/Row/Row.js","components/Row/RowItem.js","components/GetSearchedJokeRow.js","components/GetRandomJokeRow.js","api/jokeApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","chuckImage","alt","Button","props","concat","disabled","onClick","children","Row","_ref","RowItem","SearchBar","components_Row_Row","Row_RowItem","value","this","searchTerm","onChange","handleSearchTermChange","components_Button_Button","getSearchedJokes","Component","GetRandomJokeRow","getRandomJoke","categories","selectedCategory","handleCategoryChange","map","cat","i","key","fetchRandomJoke","categoryID","params","category","axios","get","then","response","data","catch","error","console","log","fetchSearchedJokes","JokeList","React","lazy","e","bind","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokes","assertThisInitialized","setState","jokeApi","randomJoke","totalJokes","result","total","event","target","_this$state","components_Header_Header","components_GetRandomJokeRow","GetSearchedJokeRow_SearchBar","react","fallback","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a0340be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck.2d16c8dc.jpg\";","import React from 'react';\r\nimport chuckImage from '../../images/chuck.jpg';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-image\">\r\n        <img src={chuckImage} alt='' />\r\n      </div>\r\n      <div className=\"header-title\">Appparently Chuck Norris knows all the jokes</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button className={`button ${props.disabled ? 'button--disabled' : ''}`} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './Row.scss';\r\n\r\nconst Row = ({children}) => {\r\n  return (\r\n    <div className=\"row\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport './Row.scss';\r\n\r\nconst RowItem = ({children}) => {\r\n  return (\r\n    <div className=\"row-item\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RowItem\r\n","import React, { Component } from 'react';\r\nimport Button from './Button/Button';\r\nimport Row from './Row/Row';\r\nimport RowItem from './Row/RowItem';\r\n\r\nexport default class SearchBar extends Component {\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <RowItem>OR SEARCH JOKES:</RowItem>\r\n        <RowItem>\r\n          <input value={this.props.searchTerm} onChange={this.props.handleSearchTermChange} />\r\n        </RowItem>\r\n        <RowItem>\r\n          <Button onClick={this.props.getSearchedJokes}>GET</Button>\r\n        </RowItem>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Button from './Button/Button';\r\nimport Row from './Row/Row';\r\nimport RowItem from './Row/RowItem';\r\n\r\nconst GetRandomJokeRow = props => {\r\n  const { getRandomJoke, categories, selectedCategory, handleCategoryChange } = props;\r\n  return (\r\n    <Row>\r\n      <RowItem>GET RAMDON JOKE: category </RowItem>{' '}\r\n      <RowItem>\r\n        <select value={selectedCategory || 'All'} onChange={handleCategoryChange}>\r\n          <option value=\"all\">All</option>\r\n          {categories.map((cat, i) => (\r\n            <option value={cat} key={i}>\r\n              {cat}\r\n            </option>\r\n          ))}\r\n        </select>{' '}\r\n      </RowItem>\r\n      <RowItem>\r\n        <Button onClick={getRandomJoke}>Get random joke</Button>\r\n      </RowItem>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default GetRandomJokeRow;\r\n","import axios from 'axios';\r\n\r\nexport function fetchJokeCategories() {\r\n  return axios\r\n    .get('https://api.chucknorris.io/jokes/categories')\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nexport function fetchRandomJoke(categoryID) {\r\n  const params = categoryID !== 'all' ? {\r\n    params: {\r\n      category: categoryID\r\n    }\r\n  } : '';\r\n  return axios\r\n    .get('https://api.chucknorris.io/jokes/random', params )\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nexport function fetchSearchedJokes(searchTerm) {\r\n  return axios\r\n    .get(`https://api.chucknorris.io/jokes/search?query=${searchTerm}`)\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}","import React, { Component, Suspense } from 'react';\r\nimport Header from './components/Header/Header';\r\nimport GetSearchedJokeRow from './components/GetSearchedJokeRow';\r\n// import JokeList from './components/JokeList/JokeList';\r\n\r\nimport GetRandomJokeRow from './components/GetRandomJokeRow';\r\n\r\nimport * as jokeApi from './api/jokeApi';\r\n\r\nimport './App.scss';\r\nconst JokeList = React.lazy(() => import('./components/JokeList/JokeList'));\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      categories: [],\r\n      jokes: [],\r\n      searchTerm: null,\r\n      selectedCategory: null,\r\n    };\r\n\r\n    this.getSearchedJokes = this.getSearchedJokes.bind(this);\r\n    this.getRandomJoke = this.getRandomJoke.bind(this);\r\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\r\n    this.handleSearchTermChange = this.handleSearchTermChange.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const categories = await jokeApi.fetchJokeCategories();\r\n    this.setState({ categories });\r\n\r\n    this.getRandomJoke();\r\n  }\r\n\r\n  async getRandomJoke() {\r\n    const { selectedCategory } = this.state;\r\n    const randomJoke = await jokeApi.fetchRandomJoke(selectedCategory);\r\n\r\n    this.setState({ jokes: [ randomJoke ], totalJokes: 0 });\r\n  }\r\n\r\n  async getSearchedJokes() {\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm) {\r\n      const jokes = await jokeApi.fetchSearchedJokes(searchTerm);\r\n      this.setState({ jokes: jokes.result, totalJokes: jokes.total });\r\n    } else {\r\n      this.getRandomJoke();\r\n    }\r\n  }\r\n\r\n  handleCategoryChange(event) {\r\n    this.setState({ selectedCategory: event.target.value });\r\n  }\r\n\r\n  handleSearchTermChange(event) {\r\n    this.setState({ searchTerm: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { categories, selectedCategory, searchTerm, totalJokes, jokes } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <GetRandomJokeRow\r\n          getRandomJoke={this.getRandomJoke}\r\n          categories={categories}\r\n          selectedCategory={selectedCategory}\r\n          handleCategoryChange={this.handleCategoryChange}\r\n        />\r\n        <GetSearchedJokeRow\r\n          value={searchTerm}\r\n          handleSearchTermChange={this.handleSearchTermChange}\r\n          getSearchedJokes={this.getSearchedJokes}\r\n        />\r\n        <Suspense fallback={<div>Chuck Norris is coming...</div>}>\r\n          <JokeList totalJokes={totalJokes} jokes={jokes} />\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}