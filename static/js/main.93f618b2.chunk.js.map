{"version":3,"sources":["images/chuck.jpg","components/Button.js","components/Header.js","components/SearchBar.js","components/Joke.js","components/JokeList.js","components/GetRandomJokeRow.js","api/jokeApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","concat","disabled","onClick","children","Header","src","chuckImage","SearchBar","value","this","searchTerm","onChange","handleSearchTermChange","src_components_Button","getSearchedJokes","Component","Joke","icon","category","url","JokeList","console","log","jokes","totalJokes","map","joke","components_Joke","icon_url","key","id","GetRandomJokeRow","getRandomJoke","categories","selectedCategory","handleCategoryChange","cat","i","fetchRandomJoke","categoryID","params","axios","get","then","response","data","catch","error","fetchSearchedJokes","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","setState","jokeApi","randomJoke","result","total","event","target","components_Header","components_GetRandomJokeRow","SearchBar_SearchBar","components_JokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4SCYzBC,SARA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAS,UAAAC,OAAYL,EAAMM,SAAW,mBAAqB,IAAMC,QAASP,EAAMO,SACrFP,EAAMQ,6BCaEC,EAhBA,WACb,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,gDAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,UCTCC,mLAEjB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOU,MAAOC,KAAKd,MAAMe,WAAYC,SAAUF,KAAKd,MAAMiB,yBAC1DhB,EAAAC,EAAAC,cAACe,EAAD,CAAQX,QAASO,KAAKd,MAAMmB,kBAA5B,eAL+BC,aCWxBC,EAZF,SAAArB,GAAS,IACZsB,EAA+BtB,EAA/BsB,KAAMC,EAAyBvB,EAAzBuB,SAAUC,EAAexB,EAAfwB,IAAKX,EAAUb,EAAVa,MAC7B,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKO,IAAKY,IACTC,GAAYtB,EAAAC,EAAAC,cAAA,wBAAgBoB,EAAS,IACtCtB,EAAAC,EAAAC,cAAA,mBAAWqB,GACXvB,EAAAC,EAAAC,cAAA,WAAMU,KCiBGY,EAtBE,SAAAzB,GAEf,OADA0B,QAAQC,IAAI,YAAa3B,EAAM4B,OAE7B3B,EAAAC,EAAAC,cAAA,WACGH,EAAM6B,YAAc7B,EAAM6B,WAC1B7B,EAAM4B,MAAME,IAAI,SAAAC,GAAI,OACnB9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAMV,KAAMS,EAAKE,SAAUC,IAAKH,EAAKI,GAAIZ,SAAUQ,EAAKR,SAAUC,IAAKO,EAAKP,IAAKX,MAAOkB,EAAKlB,YCWtFuB,EAlBU,SAAApC,GAAS,IACzBqC,EAAqErC,EAArEqC,cAAeC,EAAsDtC,EAAtDsC,WAAYC,EAA0CvC,EAA1CuC,iBAAkBC,EAAwBxC,EAAxBwC,qBACpD,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,CAAQX,QAAS8B,GAAjB,mBADF,QACgE,IAC9DpC,EAAAC,EAAAC,cAAA,UAAQU,MAAO0B,GAAoB,MAAOvB,SAAUwB,GAClDvC,EAAAC,EAAAC,cAAA,UAAQU,MAAM,OAAd,OACCyB,EAAWR,IAAI,SAACW,EAAKC,GAAN,OACdzC,EAAAC,EAAAC,cAAA,UAAQU,MAAO4B,EAAKP,IAAKQ,GACtBD,MAGG,IATZ,aCGG,SAASE,EAAgBC,GAC9B,IAAMC,EAAwB,QAAfD,EAAuB,CACpCC,OAAQ,CACNtB,SAAUqB,IAEV,GACJ,OAAOE,IACJC,IAAI,0CAA2CF,GAC/CG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OAC1BC,MAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,KAGzB,SAASC,EAAmBtC,GACjC,OAAO+B,IACJC,IADI,iDAAA1C,OACiDU,IACrDiC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OAC1BC,MAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,eC+DjBE,cA3Eb,SAAAA,EAAYtD,GAAO,IAAAuD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1C,KAAAwC,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1C,KAAA0C,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9C,KAAMd,KAED6D,MAAQ,CACXvB,WAAY,GACZV,MAAO,GACPb,WAAY,KACZwB,iBAAkB,MAGpBgB,EAAKpC,iBAAmBoC,EAAKpC,iBAAiB2C,KAAtBN,OAAAO,EAAA,EAAAP,CAAAD,IACxBA,EAAKlB,cAAgBkB,EAAKlB,cAAcyB,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKf,qBAAuBe,EAAKf,qBAAqBsB,KAA1BN,OAAAO,EAAA,EAAAP,CAAAD,IAC5BA,EAAKtC,uBAAyBsC,EAAKtC,uBAAuB6C,KAA5BN,OAAAO,EAAA,EAAAP,CAAAD,IAbbA,iNDVZT,IACJC,IAAI,+CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OAC1BC,MAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,YCwBtBd,SACNxB,KAAKkD,SAAS,CAAE1B,eAEhBxB,KAAKuB,iRAIGE,EAAqBzB,KAAK+C,MAA1BtB,0BACiB0B,EAAwB1B,UAA3C2B,SAENpD,KAAKkD,SAAS,CAAEpC,MAAO,CAAEsC,uQAIjBnD,EAAeD,KAAK+C,MAApB9C,4CAEckD,EAA2BlD,UAAzCa,SACNd,KAAKkD,SAAS,CAAEpC,MAAOA,EAAMuC,OAAQtC,WAAYD,EAAMwC,8BAEvDtD,KAAKuB,+JAIYgC,GACnBvD,KAAKkD,SAAS,CAAEzB,iBAAkB8B,EAAMC,OAAOzD,uDAG1BwD,GACrBvD,KAAKkD,SAAS,CAAEjD,WAAYsD,EAAMC,OAAOzD,yCAGlC,IACCyB,EAAexB,KAAK+C,MAApBvB,WAER,OADAZ,QAAQC,IAAIW,GAEVrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoE,EAAD,MACAtE,EAAAC,EAAAC,cAACqE,EAAD,CACEnC,cAAevB,KAAKuB,cACpBC,WAAYxB,KAAK+C,MAAMvB,WACvBC,iBAAkBzB,KAAK+C,MAAMtB,iBAC7BC,qBAAsB1B,KAAK0B,uBAG7BvC,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAACsE,EAAD,CACE5D,MAAOC,KAAK+C,MAAM9C,WAClBE,uBAAwBH,KAAKG,uBAC7BE,iBAAkBL,KAAKK,oBAG3BlB,EAAAC,EAAAC,cAACuE,EAAD,CAAU7C,WAAYf,KAAK+C,MAAMhC,WAAYD,MAAOd,KAAK+C,MAAMjC,gBAtErDR,aCAEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.93f618b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck.2d16c8dc.jpg\";","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button className={`button ${props.disabled ? 'button--disabled' : ''}`} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport chuckImage from '../images/chuck.jpg';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <div className=\"header-title\">\r\n          Appparently Chuck Norris knows all the jokes\r\n          </div>\r\n        <div className=\"header-image\">\r\n          <img src={chuckImage} />\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\r\nimport Button from './Button';\r\n\r\nexport default class SearchBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input value={this.props.searchTerm} onChange={this.props.handleSearchTermChange} />\r\n        <Button onClick={this.props.getSearchedJokes}>GET</Button> \r\n       \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Joke = props => {\r\n  const { icon, category, url, value } = props;\r\n  return (\r\n    <div>\r\n      <img src={icon} />\r\n      {category && <div>category: {category[0]}</div>} \r\n      <div>url: {url}</div>\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Joke;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Joke from './Joke';\r\n\r\nconst JokeList = props => {\r\n  console.log('joke list', props.jokes)\r\n  return (\r\n    <div>\r\n      {props.totalJokes && props.totalJokes }\r\n      {props.jokes.map(joke => (\r\n        <Joke icon={joke.icon_url} key={joke.id} category={joke.category} url={joke.url} value={joke.value} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nJokeList.propTypes = {\r\n  jokes: PropTypes.shape({\r\n    category: PropTypes.string,\r\n    icon: PropTypes.string,\r\n    id: PropTypes.string,\r\n    url: PropTypes.string,\r\n    value: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default JokeList;\r\n","import React from 'react'\r\nimport Button from './Button';\r\n\r\nconst GetRandomJokeRow = props => {\r\n  const {getRandomJoke, categories, selectedCategory, handleCategoryChange} = props\r\n  return (\r\n    <div>\r\n      <Button onClick={getRandomJoke}>Get random joke</Button> from{' '}\r\n      <select value={selectedCategory || 'All'} onChange={handleCategoryChange}>\r\n        <option value='all'>All</option>\r\n        {categories.map((cat, i) => (\r\n          <option value={cat} key={i}>\r\n            {cat}\r\n          </option>\r\n        ))}\r\n      </select>{' '}\r\n      category\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default GetRandomJokeRow\r\n","import axios from 'axios';\r\n\r\nexport function fetchJokeCategories() {\r\n  return axios\r\n    .get('https://api.chucknorris.io/jokes/categories')\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nexport function fetchRandomJoke(categoryID) {\r\n  const params = categoryID !== 'all' ? {\r\n    params: {\r\n      category: categoryID\r\n    }\r\n  } : '';\r\n  return axios\r\n    .get('https://api.chucknorris.io/jokes/random', params )\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nexport function fetchSearchedJokes(searchTerm) {\r\n  return axios\r\n    .get(`https://api.chucknorris.io/jokes/search?query=${searchTerm}`)\r\n    .then(response => response.data)\r\n    .catch(error => console.log(error));\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from './components/Button';\r\nimport Header from './components/Header';\r\nimport SearchBar from './components/SearchBar';\r\nimport JokeList from './components/JokeList';\r\nimport GetRandomJokeRow from './components/GetRandomJokeRow';\r\n\r\nimport * as jokeApi from './api/jokeApi';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      categories: [],\r\n      jokes: [],\r\n      searchTerm: null,\r\n      selectedCategory: null,\r\n    };\r\n\r\n    this.getSearchedJokes = this.getSearchedJokes.bind(this);\r\n    this.getRandomJoke = this.getRandomJoke.bind(this);\r\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\r\n    this.handleSearchTermChange = this.handleSearchTermChange.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const categories = await jokeApi.fetchJokeCategories();\r\n    this.setState({ categories });\r\n\r\n    this.getRandomJoke();\r\n  }\r\n\r\n  async getRandomJoke() {\r\n    const { selectedCategory } = this.state;\r\n    const randomJoke = await jokeApi.fetchRandomJoke(selectedCategory);\r\n\r\n    this.setState({ jokes: [ randomJoke ] });\r\n  }\r\n\r\n  async getSearchedJokes() {\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm) {\r\n      const jokes = await jokeApi.fetchSearchedJokes(searchTerm);\r\n      this.setState({ jokes: jokes.result, totalJokes: jokes.total });\r\n    } else {\r\n      this.getRandomJoke();\r\n    }\r\n  }\r\n\r\n  handleCategoryChange(event) {\r\n    this.setState({ selectedCategory: event.target.value });\r\n  }\r\n\r\n  handleSearchTermChange(event) {\r\n    this.setState({ searchTerm: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { categories } = this.state;\r\n    console.log(categories);\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <GetRandomJokeRow\r\n          getRandomJoke={this.getRandomJoke}\r\n          categories={this.state.categories}\r\n          selectedCategory={this.state.selectedCategory}\r\n          handleCategoryChange={this.handleCategoryChange}\r\n        />\r\n\r\n        <div>\r\n          or search:\r\n          <SearchBar\r\n            value={this.state.searchTerm}\r\n            handleSearchTermChange={this.handleSearchTermChange}\r\n            getSearchedJokes={this.getSearchedJokes}\r\n          />\r\n        </div>\r\n        <JokeList totalJokes={this.state.totalJokes} jokes={this.state.jokes} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}